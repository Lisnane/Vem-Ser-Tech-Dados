# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19wCbSxv6DDghpgv20cmrN6bkndJrhmsT
"""

''' Lisnane Vitória de Oliveira - Turma 1105 - Vem Ser Tech|Dados

Projeto Final - Lógica de Programação II
Definição do tema: Lista de controle de clientes de um designer gráfico'''

# Item 1 - Ler uma lista de im JSON
import json

def ler_json(clientes):
  try:
      with open("clientes.json", "r") as arq:
          lista_clientes = json.loads(arq.read())
      return lista_clientes
  except FileNotFoundError as e:
      raise FileNotFoundError(f"O arquivo {clientes.json} não foi encontrado") from e
  except json.JSONDecodeError as e:
      raise Exception(f'Erro na decodificação do JSON em {clientes.json}.') from e

try:
    lista_clientes = ler_json("clientes.json")
    print("Clientes carregados com sucesso:", lista_clientes)
except FileNotFoundError:
    print("Erro: Arquivo não encontrado")
except Exception:
    print("Erro desconhecido")

print("---------------------------------------------------------")

#Item 2 - Realizar um mapeamento, um filtro e uma redução (utilizar lambda function)

from functools import reduce


def get_nomes_clientes(lista_clientes):
    try:
        nomes_clientes = list(map(lambda c: c["nome"], lista_clientes))
        print("Nome dos Clientes:\n", nomes_clientes)
    except KeyError as e:
        raise keyError(f"Chave ausente no discionário do cliente: {e}")

    except Exception as e:
        raise Exception(f"Erro desconhecido ao processar os clientes: {str(e)}")

def pagamento_recebido(lista_clientes):
  try:
        pagamento_recebido = list(filter(lambda c: c["pagamento recebido"], lista_clientes))
        nomes_pagamento_recebido = list(map(lambda c: c["nome"], pagamento_recebido))
        print("Os clientes que já efetuaram o pagamento foram:\n", nomes_pagamento_recebido)
  except FileNotFoundError as e:
      raise FileNotFoundError(f"O arquivo {clientes.json} não foi encontrado") from e
  except json.JSONDecodeError as e:
      raise Exception(f'Erro na decodificação do JSON em {clientes.json}.') from e

def media_pedidos(lista_clientes):
    try:
        total_clientes = len(lista_clientes)
        quantidade_media = reduce(lambda soma, c: soma + c["quantidade"], lista_clientes, 0) // total_clientes
        print(f"A quantidade média de pedidos é de {quantidade_media} artes ")
    except KeyError as e:
        raise keyError(f"Chave ausente no discionário do cliente: {e}")
    except Exception as e:
        raise Exception(f"Erro desconhecido ao processar os clientes: {str(e)}")


print("---------------------------------------------------------")

#Item 3 - Permitir que os dados possam ser adicionados, listados, lidos individualmente, atualizados e deletados

#  Operação 1 - Listagem de Clientes

def mostrar_clientes(lista_clientes):
  try:
      print("-----Lista de Clientes-----")
      for cliente in lista_clientes:
          print("-----------------------------")
          print("Nome:", cliente["nome"])
          print("Id do cliente:", cliente["id do cliente"])
          print("Categoria:", cliente["categoria"])
          print("Quantidade:", cliente["quantidade"])
          print("Preço unitário:", cliente["preço unitário"])
          print("Preço total:", cliente["preço total"])
          print("Pagamento recebido:", cliente["pagamento recebido"])
          print("-----------------------------")
  except KeyError:
      raise KeyError("Chave ausente no dicionário do cliente.")
  except Exception:
      raise Exception("Erro desconhecido ao mostrar os clientes.")


try:
  mostrar_clientes(lista_clientes)
except KeyError:
  print("Erro: Chave ausente no dicionário do cliente.")
except Exception:
  print("Erro desconhecido ao mostrar os clientes.")

print("---------------------------------------------------------")

# Operação 2 - Adicionar Cliente

def atualizar_json(lista_clientes):
  try:
      with open("clientes.json", "w") as arq:
          arq.write(json.dumps(lista_clientes))
  except Exception:
      raise Exception("Erro ao atualizar o arquivo JSON.")

def adicionar_cliente(lista_clientes, cliente):
  try:
      lista_clientes.append(cliente)
      atualizar_json(lista_clientes)
  except Exception:
      raise Exception("Erro ao adicionar cliente.")


try:
  adicionar_cliente(lista_clientes, {
      "nome": "Marcelo Americo",
      "id do cliente": 22,
      "categoria": "Thumb YouTube",
      "quantidade": 4,
      "preço unitário": 150.00,
      "preço total": 600.00,
      "pagamento recebido": False
  })
except Exception:
  print("Erro ao adicionar cliente.")

print("---------------------------------------------------------")

# Operação 3 - Vizualizar Cliente

def vizualizar_cliente(lista_clientes, indice):
  try:
      cliente = lista_clientes[indice]
      print("-----------------------------")
      print("Nome:", cliente["nome"])
      print("Id do cliente:", cliente["id do cliente"])
      print("Categoria:", cliente["categoria"])
      print("Quantidade:", cliente["quantidade"])
      print("Preço unitário:", cliente["preço unitário"])
      print("Preço total:", cliente["preço total"])
      print("Pagamento recebido:", cliente["pagamento recebido"])
      print("-----------------------------")
  except IndexError:
      raise IndexError("Índice fora dos limites da lista.")
  except KeyError:
      raise KeyError("Chave ausente no dicionário do cliente.")
  except Exception:
      raise Exception("Erro desconhecido ao visualizar o cliente.")


try:
  cliente_escolhido = int(input("Informe o índice do cliente que deseja visualizar: "))
  print(f"Informações do cliente escolhido: ")
  vizualizar_cliente(lista_clientes, cliente_escolhido)
except IndexError:
  print("Erro: Índice fora dos limites da lista.")
except KeyError:
  print("Erro: Chave ausente no dicionário do cliente.")
except Exception:
  print("Erro desconhecido ao visualizar o cliente.")

print("---------------------------------------------------------")

# Operação 4 - Remover Cliente

def remover_cliente(lista_clientes, indice):
  try:
      cliente = lista_clientes[indice]
      lista_clientes.pop(indice)
      atualizar_json(lista_clientes)
      return cliente
  except IndexError:
      raise IndexError("Índice fora dos limites da lista.")
  except Exception:
      raise Exception("Erro desconhecido ao remover o cliente.")


try:
  indice_remover = int(input("Informe o índice do cliente que deseja remover: "))
  cliente_removido = remover_cliente(lista_clientes, indice_remover)
  print(f"O cliente removido foi: {cliente_removido}")
except IndexError:
  print("Erro: Índice fora dos limites da lista.")
except Exception:
  print("Erro desconhecido ao remover o cliente.")

print("---------------------------------------------------------")

# Operação 5 - Atualizar Cliente

def atualizar_cliente(lista_clientes, indice, dados_cliente):
  try:
      lista_clientes[indice] = dados_cliente
      atualizar_json(lista_clientes)
      return lista_clientes[indice]
  except IndexError:
      raise IndexError("Índice fora dos limites da lista.")
  except Exception:
      raise Exception("Erro desconhecido ao atualizar o cliente.")

def buscar_cliente(lista_clientes, nome):
  try:
      for i in range(len(lista_clientes)):
          if lista_clientes[i]["nome"] == nome:
              return i
      return -1
  except Exception:
      raise Exception("Erro desconhecido ao buscar o cliente.")


try:
  cliente_atualizado = {
      "nome": "Fino Barbosa",
      "id do cliente": 2,
      "categoria": "Capa Twitter",
      "quantidade": 2,
      "preço unitário": 250.00,
      "preço total": 500.00,
      "pagamento recebido": True
  }

  print("O cliente atualizado foi: ", atualizar_cliente(lista_clientes, 1, cliente_atualizado))
except IndexError:
  print("Erro: Índice fora dos limites da lista.")
except Exception:
  print("Erro desconhecido ao atualizar o cliente.")

print("---------------------------------------------------------")

#Item 4 - Garantir que todas as operações tenham validações (try-except, raise)

#Item 5 e 6

#Criar uma função para obter uma lista de tuplas, com o máximo (ou o mínimo) valor de algum atributo numérico, com o primeira
#posição contendo o nome do elemento e a segunda o valor máximo (o motivo de ser lista é porque pode ter mais de um elemento #com o valor máximo). Exemplo de saída (alunos e suas notas):
#[("Thiago", 9.5), ("Luís Fernando", 9.5)]
#Esta função deve ter um parâmetro opcional (pode ser de qualquer tipo), que indicará qual
#das estatísticas você deseja obter (mínimo ou máximo)
def encontrar_max_min(lista_clientes, preco_total, estatistica=max):
  valor_extremo = None
  itens_extremos = []

  try:
      for item in lista_clientes:
          valor = item.get(preco_total)
          if valor is not None:
              if valor_extremo is None or estatistica(valor, valor_extremo) == valor:
                  valor_extremo = valor
                  itens_extremos = [(item["nome"], valor_extremo)]
              elif estatistica(valor, valor_extremo) == valor:
                  itens_extremos.append((item["nome"], valor_extremo))
  except Exception:
      raise ValueError("Erro durante a execução")

  return itens_extremos



try:
  valor_maximo = encontrar_max_min(lista_clientes, "preço total", max)
  print(f"O valor máximo é: {valor_maximo}")

  valor_minimo = encontrar_max_min(lista_clientes, "preço total", min)
  print(f"O valor mínimo é: {valor_minimo}")
except ValueError:
  print("Erro: Valor incorreto")
except Exception:
  print("Erro inesperado")

print("---------------------------------------------------------")

#Item 7 e 8

#Obter pelo menos três dados estatístico simples, entre média, mediana, moda e desvio padrão, a partir de algum agrupamento
#de dados (exemplo, a média de idade do grupo de professores que dão aula de exatas) (utilizar list comprehension)
#Salvar dados estatísticos em um CSV


def gerar_estatisticas(lista_clientes):
    dic_categorias = {}

    try:
        for cliente in lista_clientes:
            categoria_atual = cliente["categoria"]
            lista = dic_categorias.get(categoria_atual, [])
            lista.append(cliente)
            dic_categorias[categoria_atual] = lista

        print(dic_categorias)

        # Salvar dados estatísticos em um CSV
        with open('estatisticas.csv', 'w') as arq:
            arq.write("Categoria, Média\n")

            for categoria, lista_clientes in dic_categorias.items():
                try:
                    media = reduce(lambda soma, c: soma + c["preço total"], lista_clientes, 0) / len(lista_clientes)
                    print(f"A categoria {categoria} possui média {media:.2f}")
                    arq.write(f"{categoria}, {media}\n")

                except ZeroDivisionError:
                    raise ValueError(f"A categoria {categoria} não possui clientes para calcular a média.")
    except Exception:
        raise ValueError("Erro durante a geração de estatísticas.")

gerar_estatisticas(lista_clientes)

print("---------------------------------------------------------")